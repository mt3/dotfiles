[user]
	name = n am
	email = na@na.na
    # set email per machine in $GIT_AUTHOR_EMAIL or per repo

[core]
    # autocrlf = false
    editor = mvim -f
    excludesfile = ~/.gitignore_global
    filemode = true
    # proxy settings TODO
    # gitProxy="ssh" for "kernel.org"
    # gitProxy=default-proxy ; for the rest
    logallrefupdates = true
    # set pager = "" don't use 'more' or 'less' pagers since i am restricting the number of commits displayed anyway
    # plus this eliminates the "press any key" prompt at the end of each output
    pager = ""
    quotepath = false
    whitespace = space-before-tab, trailing-space

[achievement]
	upload = true

[alias]
    a = add
    ai = add --interactive
    # add files to repo
    au = !git ls-files --other --exclude-standard -z | xargs -0 git add -Nv
    both = diff HEAD
	branches = !legit branches
    browse = !hub browse
    c = commit --verbose -m
    b = branch -a
    br = branch -avv
    cat = !cat @
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    chunkyadd = add --patch # stage commits chunk by chunk
    co = checkout
    compare = !hub compare
	current-branch = "!r=$(git symbolic-ref HEAD);echo ${r##refs/heads/}"
    cv = commit --verbose
    # cvv = !git-cv
    d = diff --word-diff
    dc = diff --cached
    diffstat = diff --stat
    ds = diff --stat
    filelog = log -u # show changes to a file
    # amend to a previous commit
    fixup = !sh -c 'git commit --fixup $1 && \
                  git stash && \
                  git rebase -i $1~1 && \
                  git stash pop' -
    # fp = format-patch --stdout
    # fetch from all remotes and reset to origin/master
    fresh = !git fetch --all && git reset --hard origin/master -
    # grab = !git-grab
	graft = !legit graft \"$@\"
    graph = log --oneline --graph
    gl = !git lg $(git show-ref | cut -d " " -f 2 | grep -v stash$)
    greplog = log -U1 -G
	harvest = !legit harvest \"$@\"
	in = "!b=$(git current-branch);git ll $b..origin/$b"
    l = log --pretty=format:\"%Cgreen%ad%Creset | %s%d [%Cblue%an%Creset]\" --ignore-all-space --ignore-space-change --graph --date=relative --graph --max-count=10 --since=\"1 month ago\" --stat
	la = !git ll --all
	lal = log --graph --abbrev-commit --date=relative --all
    last = log -1
    lg = log --oneline --decorate --ignore-all-space --ignore-space-change --date=relative --graph --max-count=10 --since=\"1 month ago\" --stat
    lgg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    list = ls-files
    ll = log --pretty=oneline --abbrev-commit --max-count=15
    llg = log --summary -n10
    lll = log --graph --decorate --pretty=format:'%C(magenta)%h%C(reset)%C(bold yellow)%d%C(reset) %s %C(green)%an %C(bold black)%cr%C(reset)' --abbrev-commit --date=relative
    lol = log --graph --decorate --pretty=oneline --abbrev-commit --date=relative --graph --max-count=50 --since=\"1 month ago\"
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
    lolal = log --graph --decorate --pretty=oneline --abbrev-commit --all
    lolalnp = !git --no-pager lolal
    loll = log --graph --decorate --pretty=oneline --abbrev-commit
    lolnp = !git --no-pager loll
    ls = ls-files
    mergef = merge --ff-only
    mf = merge --ff-only
    oneline = log --oneline
    out = "!b=$(git current-branch);git ll origin/$b..$b"
    p = pull
    pp = !git pull --rebase && git push
    praise = blame
    pu = push
	publish = !legit publish \"$@\"
    r = remote -v
    ra = remote add
    rc = rebase --continue
    review = log -p --max-count=1
    # useful rebasing your topic branch against the newest version of master
    rom = rebase origin/master
    rs = rebase --skip
    rv = remote -v
    s = status -sb
    serve = daemon --reuseaddr --base-path=. --export-all --verbose
    # sh = !git-sh
    shviz = !git shortlog -s | cut -f1 | spark
	sprout = !legit sprout \"$@\"
    st = status -sb
    staged = diff --cached
    stsh = stash
    stsha = stash apply
    stshl = stash list
    stshls = stash list
    sub = submodule
    subup = submodule foreach 'git pull'
	switch = !legit switch \"$@\"
	sync = !legit sync \"$@\"
    t = tag -n
    # thanks = !git-thanks
    # track = !git-track
	unpublish = !legit unpublish \"$@\"
    uncommit = reset --soft HEAD^   # go back before last commit, with files in uncommitted state
    unstage = reset HEAD  # remove files from index (tracking)
    up = pull --rebase
    vimdiff = difftool -y -t mvimdiff # type "git vimdiff" to view a diff in macvim
    w = !hub browse
    wc = whatchanged
    # wip = !git add -u && git commit -m ...
    # wipc = !date >> WIP && git add WIP && git commit -m ...
    wp = whatchanged -p

[apply]
    # automagically fix whitespace
    whitespace = fix

[branch]
    autosetupmerge = true

[color]
    branch = auto
    diff = auto
    status = auto
    ui = auto
    interactive = auto
    pager = true
    wtf = true

[color "branch"]
    current = green bold
    local = blue
    remote = magenta

[color "diff"]
    meta = cyan bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

#[diff]
#  external = extDiff
#  external = mvimdiff -f #/usr/local/bin/diff-wrapper
#  external = git_diff_wrapper
#  tool = mvimdiff

# [difftool]
  # prompt = false

# [difftool "sourcetree"]
# 	cmd = " "
# 	path = 
 
[github]
    user = mt3
    token = $GITHUB_TOKEN

[help]
    format = web # view all "git help cmd" within a browser
    autocorrect = 0 # default beahaviour

#[merge]
#  tool = mvimdiff
#  summary = true
# 
#[mergetool "mvimdiff"]
#  cmd = extMerge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
#  trustExitCode = false

# [mergetool "sourcetree"]
# 	cmd = " "
# 	trustExitCode = true

# [pager]
  # this is needed for viewing diffs in macvim
  # diff =

[push]
    default = tracking # prevent accidental pushes to branches u ain't ready 2 push to yet
    # default = upstream

# [rerere]
# 	enabled = true
# 	autoupdate = true

[wtf]
	all = true
	long = true

[wtf "show"]
	relations = true

[difftool "sourcetree"]
	cmd = " "
	path = 
[mergetool "sourcetree"]
	cmd = " "
	trustExitCode = true

[mergetool]
	keepBackup = true
