" TODO {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "
    " convert everything to use Vundle. see Vundle section in https://github.com/gmarik/vimfiles/blob/master/vimrc
    " when using 'gcc' to comment code, don't add a space between comment symbol and actual code
    " rename my-macvim.colorscheme to black-and-white-and-grey.colorscheme
    " map <D-w> :q!<CR>
    " smartly fold only on def, class, for loops, etc and not just on indentations
    " always open macvim with split pane with the vim help file or whatever info pane (2/3 file, 1/3 help) <C-w> T moves current pane to its own tab. <C-w> 20 < shrinks width of the pane by 20.
    " display errors to logfile or logbuffer, mostly whenever we reload/source .vimrc
    " a line with a todo should have darkened background for the rest of the line after the todo
    " have vim's help page open in a horizontal split pane (on right), not vertical 'splitright' instead of 'splitbelow'?
    " get rid of string highlights in vim files while in the body of a comment such as "this"
        " (check ':set comments?' for what this ftype is using)
        " ':set comments' for c++ file is 'comments=sO:* -,mO:*  ,exO:*/,s1:/*,mb:*,ex:*/,://'. for vim files it is 'comments=sO:" -,mO:"  ,eO:"",:"'
        " thus should be written as ':set comments=sO:" -,mO:"  ,eO:"",:"'
    " change code-folding message so that '32 lines' is a lighter color than the line number
    " .pentadactylrc and .penta files need to be syntax-highlighted using vim (i have an attempt below, but doesn't work)
    " use <M-/> for toggling comments on/off a la textmate, use '!' to toggle
        " i.e. 'map <leader>wr :set wrap!<CR>' toggles wrapping
        " currently using 'gcc' or 'gc' (in visual mode) to toggle comments
    " document what many of the non-obvious options do
    " always open new split-panes to the right horizontally, not below/above
    " change color of matching brackets in showmatch option
    " nmap / :h<space> (but why???)
    " turn off red error-messages regarding spaces at end of lines when the line is just a bunch of tabs (i.e., python)
    " make comments a different (non-fixed width) font (helvetica? italicized?)
    " after i do a 'save', automatically change to visual mode
        " map <D-s> :w<CR><ESC>
    " with autoindent, when <CR> is typed to get new indented line, <Esc> somehow removes the indent
    " stop infinite scroll at bottom of buffer, go 10 max
    " in split panes, unfocused buffers should be dimmed
    " list all keybindings (':map' lists most of them). list insert and cmd bindings with ':map!'. builtin ones (not user-defined or current ones) can be seen via ':h index'. all options are displayed with':options'. all plugins and bundles that are loaded ':scriptnames'. to list all user-set options type ':set'.
    " set backspace key <BS> to something good
    " delete LOAD PLUGINS once i get pathogen back up and running
    " have code pasted into vim automatically be indented and formatted properly as per context
    " auto align/format columnar settings/configurations w/ shortcut
    " install textile syntax highlighter
    " 'map <leader>uw lowercase' or 'map gu lowercase'
    " map <leader>Uw uppercase or 'map gU lowercase'
    " save a workspace/layout, along with tmux settings (see wemux, or vim-mux, etc.)
    "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" MAIN STARTUP & LOADING {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "
    " NOTE: <Cmd-s> in Macvim is <D-s>, not <C-s> or <M-s>!
    "
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    set nocompatible " Necesary for fun
    
    " setup vim plugins using pathogen
    filetype off " need to turn off filetype for pathogen
    " To disable a plugin, add it's bundle name to the following list
    let g:pathogen_disabled = []
    call add(g:pathogen_disabled, 'vimpy')
    call add(g:pathogen_disabled, 'simplenote')
    call add(g:pathogen_disabled, 'tasklist')
    call add(g:pathogen_disabled, 'minibufexplorer')
    call add(g:pathogen_disabled, 'vim-django')
    
    "source ~/.dotfiles/vim/bundle/vim-pathogen/autoload/pathogen.vim
    "set runtimepath=~/.dotfiles/vim,$VIMRUNTIME
    
    ""call pathogen#runtime_append_all_bundles() "TODO not used anymore? use infect()?
    "call pathogen#infect('~/.dotfiles/vim/bundle')
    "call pathogen#helptags()
    syntax on
    filetype on
    filetype plugin indent on
    let g:is_posix = 1 " vim's default is archaic bourne shell, bring it to the 90s
    
    version 7.3
    if &cp | set nocp | endif
    let s:cpo_save=&cpo " 's:' means variable 'cpo_save' has scope defined locally only within this script
    set cpo&vim
    
    set runtimepath=~/.dotfiles/vim,$VIMRUNTIME
    set statusline=

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" LOAD PLUGINS {{{ 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "
    source ~/.dotfiles/vim/bundle/ack.vim/plugin/ack.vim
    helptags ~/.dotfiles/vim/bundle/ack.vim/doc
    set rtp+=~/.dotfiles/vim/bundle/ack.vim
    
    source ~/.dotfiles/vim/bundle/Align/plugin/AlignPlugin.vim
    helptags ~/.dotfiles/vim/bundle/Align/doc
    set rtp+=~/.dotfiles/vim/bundle/Align

    source ~/.dotfiles/vim/bundle/coveragepy/ftplugin/python/coveragepy.vim
    helptags ~/.dotfiles/vim/bundle/coveragepy/doc
    set rtp+=~/.dotfiles/vim/bundle/coveragepy
    
    source ~/.dotfiles/vim/bundle/vim-fugitive/plugin/fugitive.vim
    helptags ~/.dotfiles/vim/bundle/vim-fugitive/doc
    set rtp+=~/.dotfiles/vim/bundle/vim-fugitive
    
    source ~/.dotfiles/vim/bundle/gitv/plugin/gitv.vim
    helptags ~/.dotfiles/vim/bundle/gitv/doc
    set rtp+=~/.dotfiles/vim/bundle/gitv
    
    source ~/.dotfiles/vim/bundle/jacinto.vim/plugin/jacinto.vim
    " helptags ~/.dotfiles/vim/bundle/jacinto/doc
    set rtp+=~/.dotfiles/vim/bundle/jacinto.vim
    
    source ~/.dotfiles/vim/bundle/nerdtree/plugin/NERD_tree.vim
    helptags ~/.dotfiles/vim/bundle/nerdtree/doc
    set rtp+=~/.dotfiles/vim/bundle/nerdtree
    
    source ~/.dotfiles/vim/bundle/vim-powerline/plugin/powerline.vim
    helptags ~/.dotfiles/vim/bundle/vim-powerline/doc
    set rtp+=~/.dotfiles/vim/bundle/vim-powerline

    " source simplenote username/pwd (used by simplenote.vim)
    source ~/.simplenoterc
    source ~/.dotfiles/vim/bundle/simplenote.vim/plugin/simplenote.vim
    " helptags ~/.dotfiles/vim/bundle/simplenote.vim/doc
    set rtp+=~/.dotfiles/vim/bundle/simplenote.vim
    
    source ~/.dotfiles/vim/bundle/syntastic/plugin/syntastic.vim
    helptags ~/.dotfiles/vim/bundle/syntastic/doc
    set rtp+=~/.dotfiles/vim/bundle/syntastic
    
    source ~/.dotfiles/vim/bundle/tagbar/plugin/tagbar.vim
    helptags ~/.dotfiles/vim/bundle/tagbar/doc
    set rtp+=~/.dotfiles/vim/bundle/tagbar
    
    source ~/.dotfiles/vim/bundle/tcomment_vim/plugin/tcomment.vim
    helptags ~/.dotfiles/vim/bundle/tcomment_vim/doc
    set rtp+=~/.dotfiles/vim/bundle/tcomment_vim
    
    source ~/.dotfiles/vim/bundle/taglist.vim/plugin/taglist.vim
    helptags ~/.dotfiles/vim/bundle/taglist.vim/doc
    set rtp+=~/.dotfiles/vim/bundle/taglist.vim
    
    "source ~/.dotfiles/vim/bundle/
    "helptags ~/.dotfiles/vim/bundle/
    "set rtp+=~/.dotfiles/vim/bundle/

    "source ~/.dotfiles/vim/bundle/
    "helptags ~/.dotfiles/vim/bundle/
    "set rtp+=~/.dotfiles/vim/bundle/

    "TODO: use plugins with vundle instead of pathogen. looks like a good way to combine the plugin's settings nearby its load cmd
    "
    " LOAD PLUGINS VIA VUNDLE {{{ 
        "
        " filetype off

        " " Vundle 
        " set rtp+=~/.dotfiles/vim/bundle/vundle/
        " call vundle#rc()

        " Bundle 'gmarik/vundle'

        " Colorscheme
        " Bundle 'molokai'
        " Bundle 'nelstrom/vim-mac-classic-theme'
        " Bundle 'altercation/vim-colors-solarized'
        " Bundle 'gmarik/ingretu'

        " if has("gui_running")
        "   colorscheme ingretu
        " endif

        " " General {{{
            " Bundle 'mileszs/ack.vim'
            " Bundle 'tsaleh/vim-align'
            " Bundle 'tpope/vim-endwise'
            " Bundle 'tpope/vim-fugitive'
            " Bundle 'tpope/vim-haml'
            " Bundle 'tpope/vim-rails'
            " Bundle 'tpope/vim-repeat'
            " Bundle 'tpope/vim-speeddating'
            " Bundle 'tpope/vim-surround'
            " Bundle 'tpope/vim-unimpaired'
            " Bundle 'scrooloose/nerdcommenter'
            " Bundle 'scrooloose/nerdtree'
            " Bundle 'scrooloose/vim-space'
            " Bundle 'scrooloose/syntastic'
            " "Bundle 'msanders/snipmate.vim'
            " Bundle 'sjl/threesome.vim'
            " Bundle 'nelstrom/vim-textobj-rubyblock'
            " Bundle 'kana/vim-textobj-user'
            " Bundle 'chrismetcalf/vim-yankring'
            " Bundle 'michaeljsmith/vim-indent-object'
            " Bundle 'mirell/vim-matchit'
            " Bundle 'matthias-guenther/hammer.vim'
            " Bundle 'ecomba/vim-ruby-refactoring'
            " Bundle 'kchmck/vim-coffee-script'
            " Bundle 'Lokaltog/vim-powerline'
            " Bundle 'kien/ctrlp.vim'
            " Bundle 'rstacruz/sparkup.git', {'rtp': 'vim/'}
            " Bundle 'gh:thinca/vim-poslist.git'
            " Bundle 'github:mattn/gist-vim.git'
            " Bundle 'kana/vim-textobj-user'
            " Bundle 'nelstrom/vim-textobj-rubyblock'
            " Bundle 'gmarik/github-search.vim'
            " Bundle 'gmarik/ide-popup.vim'
            " Bundle 'gmarik/sudo-gui.vim'
            " Bundle 'mbadran/headlights'
            
            " Bundle 'Lokaltog/vim-easymotion'
            " let g:EasyMotion_leader_key='<LocalLeader>'
        " " }}}

        " " Git integration
        " Bundle 'tpope/vim-git'
        " Bundle 'tpope/vim-fugitive'
        " nnoremap <leader>W :Gwrite<CR>
        " nnoremap <leader>C :Gcommit -v<CR>
        " nnoremap <leader>S :Gstatus \| 7<CR>
        " inoremap <leader>W <Esc><leader>W
        " inoremap <leader>C <Esc><leader>C
        " inoremap <leader>S <Esc><leader>S

        " Bundle 'mkitt/browser-refresh.vim'
        " com! ONRRB :au! BufWritePost <buffer> :RRB
        " com! NORRB :au! BufWritePost <buffer>

        " Bundle 'unimpaired.vim'
        " " bubble current line
        " nmap <M-j> ]e
        " nmap <M-k> [e
        " " bubble visual selection lines
        " vmap <M-j> ]egv
        " vmap <M-k> [egv

        " Bundle 'repeat.vim'
        " Bundle 'surround.vim'

        " " Bundle 'SuperTab'
        " Bundle 'file-line'
        " Bundle 'Align'
        " Bundle 'lastpos.vim'

        " Bundle 'Lokaltog/vim-easymotion'
        " let g:EasyMotion_leader_key='<LocalLeader>'

        " Bundle 'Indent-Guides'
        " let g:indent_guides_guide_size = 1

        " Bundle 'tlib'
        " Bundle 'tComment'
        " nnoremap // :TComment<CR>
        " vnoremap // :TComment<CR>

        " Bundle 'gmarik/hlmatch.vim'
        " nnoremap # :<C-u>HlmCword<CR>
        " nnoremap <leader># :<C-u>HlmGrepCword<CR>
        " vnoremap # :<C-u>HlmVSel<CR>
        " vnoremap <leader># :<C-u>HlmGrepVSel<CR>

        " nnoremap ## :<C-u>HlmPartCword<CR>
        " nnoremap <leader>## :<C-u>HlmPartGrepCword<CR>
        " vnoremap ## :<C-u>HlmPartVSel<CR>
        " vnoremap <leader>## :<C-u>HlmPartGrepVSel<CR>

        " " FuzzyFinder
        " Bundle 'L9'
        " Bundle 'FuzzyFinder'
        " " FuF customisations "{{{
        " let g:fuf_modesDisable = []
        " nnoremap <leader>h :FufHelp<CR>
        " nnoremap <leader>2  :FufFileWithCurrentBufferDir<CR>
        " nnoremap <leader>@  :FufFile<CR>
        " nnoremap <leader>3  :FufBuffer<CR>
        " nnoremap <leader>4  :FufDirWithCurrentBufferDir<CR>
        " nnoremap <leader>$  :FufDir<CR>
        " nnoremap <leader>5  :FufChangeList<CR>
        " nnoremap <leader>6  :FufMruFile<CR>
        " nnoremap <leader>7  :FufLine<CR>
        " nnoremap <leader>9  :FufTaggedFile<CR>
        " nnoremap <leader>p :FufDir ~/src/<CR>
        " nnoremap <leader>ge :FufDir ~/.rvm/gems/<CR>
        " nnoremap <leader>gn :vnew \| :FufFile ~/src/notes/<CR>
        " }}}

        " Bundle 'int3/vim-extradite'
        " Bundle 'Lokaltog/vim-powerline'
        " Bundle 'gregsexton/gitv'
        " Bundle 'thinca/vim-quickrun.git'
        " Bundle 'gh:thinca/vim-poslist.git'
        " Bundle 'github:mattn/gist-vim.git'
        " Bundle 'rstacruz/sparkup.git', {'rtp': 'vim/'}

        " non github repos
        "Bundle 'git://git.wincent.com/command-t.git'

        " Snippets
        " Bundle 'gmarik/snipmate.vim'
        " Bundle 'honza/snipmate-snippets'

        " Command-T
        " Bundle 'wincent/Command-T.git'
        " let g:CommandTMatchWindowAtTop=1 " show window at top
        " "burke's
        " nnoremap <leader>tv :CommandTFlush<cr>\|:CommandT app/views<cr>
        " nnoremap <leader>tc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
        " nnoremap <leader>tm :CommandTFlush<cr>\|:CommandT app/models<cr>
        " nnoremap <leader>tl :CommandTFlush<cr>\|:CommandT lib<cr>
        " nnoremap <leader>ta :CommandTFlush<cr>\|:CommandT app/assets<cr>
        " nnoremap <leader>tp :CommandTFlush<cr>\|:CommandT public<cr>
        " nnoremap <leader>tr :topleft :vsplit config/routes.rb<cr>
        " nnoremap <leader>tg :topleft :vsplit Gemfile<cr>

        " " Haskell {{{
            " Bundle 'Twinside/vim-syntax-haskell-cabal'
            " Bundle 'lukerandall/haskellmode-vim'
        " " }}}

        " " Colors {{{
            " Bundle 'sjl/badwolf'
            " Bundle 'altercation/vim-colors-solarized'
            " Bundle 'tomasr/molokai'
        " }}}

        " filetype plugin indent on
        
    " }}}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" MAPPINGS {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "
    " Navigation
    "
    "remap left/right arrow keys for tab next/previous
    map <Left> gT
    map <Right> gt
    imap <D-BS> 
    imap <M-BS> 
    imap <M-Down> }
    inoremap <D-Down> <C-End>
    imap <M-Up> {
    inoremap <D-Up> <C-Home>
    noremap! <M-Right> <C-Right>
    noremap! <D-Right> <End>
    noremap! <M-Left> <C-Left>
    noremap! <D-Left> <Home>
    map! <D-v> *
    "nmap gx <Plug>NetrwBrowseX
    map <M-Down> }
    noremap <D-Down> <C-End>
    map <M-Up> {
    noremap <D-Up> <C-Home>
    noremap <M-Right> <C-Right>
    noremap <D-Right> <End>
    noremap <M-Left> <C-Left>
    noremap <D-Left> <Home>
    " Easy buffer/split pane navigation
    noremap <C-h>  <C-w>h
    noremap <C-j>  <C-w>j
    noremap <C-k>  <C-w>k
    noremap <C-l>  <C-w>l
    " vertical window split
    noremap <leader>v <C-w>v
    " Begining & End of line in Normal mode 
    noremap H ^
    noremap L g_
    " Use ,z to "focus" the current fold.
    nnoremap <leader>z zMzvzz
    
    "nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)

    " Mac-style cut and paste
    vmap <BS> "-d
    vmap <D-x> "*d
    vmap <D-c> "*y
    vmap <D-v> "-d"*P
    " backspace in Visual mode deletes selection
    "vnoremap <BS> d    
    nmap <D-v> "*P
    " quickly yank to end of line
    nnoremap Y  y$ 
    "TODO: another version has nmap Y  y$ 

    nmap <BS> dd<ESC>O

    let &cpo=s:cpo_save
    unlet s:cpo_save

    " TODO
    " if MySys() == "mac"
    "   nmap <D-j> <M-j>
    "   nmap <D-k> <M-k>
    "   vmap <D-j> <M-j>
    "   vmap <D-k> <M-k>
    " endif
    
    " Tab or Shift-Tab indents/unidents selected line(s)
    vnoremap <S-Tab> <gv
    vnoremap <Tab>	 >gv
    nnoremap <S-Tab> <<
    nnoremap <Tab>	 >>
    " Textmate-style indentation shortcuts
    vnoremap <D-<> <gV
    vnoremap <D->> >gV
    nnoremap <D-<> <<
    nnoremap <D->> >>

    " save file, then goto normal mode TODO: does not work
    " :an 10.290 File.Save <Nop>
	" macm File.Save key=<nop>
    " noremap <D-s> :w<CR>
	"nmap <D-t> :sp .<CR>
    "unmap <D-s>
    "iunmap <D-s>
    "noremap <D-s> :update<CR>
    "inoremap <D-s> :update<CR><Esc>
    iunmap <D-s>
    imap <D-s> :w<CR><Esc>

    " TODO the below isn't working
    macm File.New\ Tab key=<nop>
    nmap <D-t> :echo "hello " &shell<CR>

    " map Enter key to add new line above/below and return to visual mode
    nmap <CR> o<ESC>0
    nmap <S-CR> O<ESC>0

    " TODO all help calls run in a vertical window to the right
    "noremap H :execute "vertical help <cword>"
    
    " Opens a vertical split and switches over
    nnoremap <leader>v <C-w>v<C-w>l

    " Remap j and k to act as expected when used on long, wrapped, lines
    " TODO: relativenumber in column becomes useless then
    nnoremap j gj
    nnoremap k gk
    " Map the arrow keys to be based on display lines, not physical lines
    map <Down> gj
    map <Up> gk
    " Move cursor together with the screen
    noremap <D-k> j<c-e>
    noremap <D-j> k<c-y>
    
    " Bubble single lines
    nmap <C-Up> ddkP
    nmap <C-Down> ddp
    
    " Better Marks
    nnoremap ' `

    " Use Q for formatting instead of Ex mode TODO: explain
    map Q gq
    
    " Swap ; and :  Convenient. as. fukc.
    nnoremap ; :
    nnoremap : ;

    " space/shift-space scroll in normal mode
    noremap <S-Space> <C-b>
    noremap <Space> <C-f> 
    " Saves time (but i already remapped to scrolling a la web browsers below)
    "nmap <Space> ;
    
    " Swap v and <C-v>  Convenient. as. fukc.
    nnoremap v <C-v>
    nnoremap <C-v> v
    
    " make e go to end of line and get ready to type in insert mode if shift-e
    nmap e $
    nmap E $a<SPACE>
    
    " Bash like keys for the command line
    "cnoremap <C-A>      <Home>
    "cnoremap <C-E>      <End>
    "cnoremap <C-K>      <C-U>
    
    " ,t to show tags window
    " let Tlist_Show_Menu=1
    " nmap <leader>t :TlistToggle<CR>

    " Quick alignment of text
    nmap <leader>al :left<CR>
    nmap <leader>ar :right<CR>
    nmap <leader>ac :center<CR>
    
    " show yankring
    "map <leader>yr :YRShow<cr> 
    
    " clear highlights
    "nnoremap <S-F3> :set hlsearch!<CR>
    noremap <silent><Leader>h :nohls<CR>
    " Clear the search buffer when hitting return
    "nnoremap <CR> :nohlsearch<CR>
    "map <leader>h :noh<CR> 
    " map <leader>h :set hlsearch!<CR>
    
    " toggle invisibles (whitespace, etc.)
    map <Leader>li :set list!<CR> 
    
    " Close the current buffer
    map <leader>bd :Bclose<cr>

    " hitting jj or kk will jump out of insert mode
    imap jj <Esc>
    " imap kk <Esc>

    " Create Blank Newlines and stay in Normal mode
    nnoremap <silent> zj o<Esc>
    nnoremap <silent> zk O<Esc>
    
    "nmap <silent> <leader>h :set invhlsearch<CR>
    "nmap <silent> <leader>l :set invlist<CR>
    "nmap <silent> <leader>n :set invnumber<CR>
    "nmap <silent> <leader>p :set invpaste<CR>
    "nmap <silent> <leader>i :set invrelativenumber<CR>
    
    " sane regexes
    "nnoremap / /\v
    "vnoremap / /\v

    " Keep search matches in the middle of the window.
    nnoremap n nzzzv
    nnoremap N Nzzzv
    " Same when jumping around
    nnoremap g; g;zz
    nnoremap g, g,zz

    " Map function keys
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " commented out the unmap commands since they raised errors due to no map assigned
    " unmap <f1>
    " unmap <f2>
    " unmap <f3>
    map <f3> <Nop>
    map! <f3> <Nop>
    " unmap <f4>
    " unmap <f5>
    "unmap <f6>
    "unmap <f7>
    "unmap <f8>
    "unmap <f9>
    "unmap <f0>
    " toggle/untoggle folds TODO zR is open all folds and zM is close all folds (combine in one keystroke)
    map <f1> zR<Esc>
    map <f2> zM<Esc>
    map <F3> :exe 'echo "yesy"'<CR>
    "map <f3> :exe "echomsg 'yesy'"<CR>
    map <f4> :echo "yesy"<CR>
    " Map F5 to clear the highlighting search
    map <f5> :set hls!<bar>set hls?<CR>
    map <F9> :source $MYVIMRC<CR>:echoe "Vimrc Reloaded!!!"<CR>
    "map <f >

    "py.test mappings
    " Execute the tests
    nmap <silent><Leader>tf <Esc>:Pytest file<CR>
    nmap <silent><Leader>tc <Esc>:Pytest class<CR>
    nmap <silent><Leader>tm <Esc>:Pytest method<CR>
    " cycle through test errors
    nmap <silent><Leader>tn <Esc>:Pytest next<CR>
    nmap <silent><Leader>tp <Esc>:Pytest previous<CR>
    nmap <silent><Leader>te <Esc>:Pytest error<CR>
    
    " Creating underline/overline headings for markup languages
    " Inspired by http://sphinx.pocoo.org/rest.html#sections
    nnoremap <leader>1 yyPVr=jyypVr=
    nnoremap <leader>2 yyPVr*jyypVr*
    nnoremap <leader>3 yypVr=
    nnoremap <leader>4 yypVr-
    nnoremap <leader>5 yypVr^
    nnoremap <leader>6 yypVr"

    " Quick editing (pinched from steve losh's .vimrc) {{{
        " nnoremap <leader>ev :vsplit $MYVIMRC<cr>
        " nnoremap <leader>es :vsplit ~/.vim/snippets/<cr>
        " nnoremap <leader>ed :vsplit ~/.vim/custom-dictionary.utf-8.add<cr>
        " nnoremap <leader>eo :vsplit ~/Dropbox/Org<cr>4j
        " nnoremap <leader>eh :vsplit ~/.hgrc<cr>
        " nnoremap <leader>ep :vsplit ~/.pentadactylrc<cr>
        " nnoremap <leader>em :vsplit ~/.mutt/muttrc<cr>
        " nnoremap <leader>ez :vsplit ~/lib/dotfiles/zsh<cr>4j
        " nnoremap <leader>ek :vsplit ~/lib/dotfiles/keymando/keymandorc.rb<cr>
        " nnoremap <leader>et :vsplit ~/.tmux.conf<cr>
    " }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" OPTIONS, CONFIGURATION, AND SETTINGS {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "
    set noerrorbells
    set visualbell
    set guicursor+=a:blinkon0 "turn off goddamned blinking
    set t_vb=
    set autoread " watch for file changes from external programs
    set backspace=indent,eol,start
    set fileencodings=ucs-bom,utf-8,default,latin1
    set guioptions=egmT
    set guitablabel=%M%t
    set helplang=en
    set langmenu=none
    set mouse=a " enable mouse in all modes
    set printexpr=system('open\ -a\ Preview\ '.v:fname_in)\ +\ v:shell_error
    set termencoding=utf-8
    set encoding=utf-8
    set fcs=vert:\ ,fold:\  " characters to use for the status line, folds and filler lines (i'm using <space>)
    set scrolloff=3 " keep at least 3 lines above/below
    set sidescrolloff=3 " keep at least 3 lines left/right
    set sidescroll=1
    set autoindent
    set copyindent " preserves existing indentation on a new copy
    set cpoptions+=I " TODO maintain indent on a new line after <Esc> is pressed or 'save' file
    set showmode
    set showcmd " <leader> key appears in right hand corner of vim (to the left of the cursor location) and it disappears when the timeout happens
    set hidden " buffers can be hidden (vim acts like all other editors)
    set report=0 " Always report changes
    set wildmenu
    set wildmode=list:longest
    set history=200

    set undoreload=1000
    set undolevels=1000
    set complete=.,w,b,u,U,t,i,d  " do lots of scanning on tab completion
    set nobackup " Turn backup off since futurefolks use hg/git/etc.
    set nowb
    "set backupdir=~/.dotfiles/vim/tmp/vim-backup-files
    set noswapfile " this is actually more trouble than it's worth if you keep a swapfile
    " puts swap files in this temp directory rather than all over the fukcing place
    "set directory=~/.dotfiles/vim/tmp/vim-swp-files
    
    "Persistent undo
    " TODO
    " try
    "     if MySys() == "windows"
    "         set undodir=C:\Windows\Temp
    "     else
    "         set undodir=~/.dotfiles/vim/undo,~/tmp,/tmp
    "     endif
    "     set undofile " keep a permanent undo file
    " catch
    " endtry
    
    set ttyfast " we have a fast car
    set ttimeoutlen=50 " make Esc work faster
    set timeoutlen=1000 " time to press next key after <Leader> has been pressed before it clears
    set shell=/usr/local/bin/zsh
    set ffs=unix,dos,mac " Default file types
    "set listchars=tab:▸\ ,trail:·,extends:#,nbsp:· "TODO
    " set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
    " set showbreak=↪
    

    " TODO
    "if v:version >= 700
    "    set viminfo=!,'20,<50,s10,h
    "endif
    " set viminfo=!,'20,<50,s10,h
    set viminfo='100,f1  " save up to 100 marks, enable capital marks
    
    let mapleader = ","
    let g:mapleader = ","
    
    set ignorecase
    set smartcase " Case insensitive searches become sensitive with capitals
    set gdefault " TODO
    set incsearch
    set showmatch " show matching bracket
    set hlsearch
    " Reset last search query
    let @/ = ""
    
    filetype on
    filetype indent on
    filetype plugin on
    filetype detect
    syntax enable
    
    " My preferred line and pasting formatting options 
    set wrap
    "set shiftround "TODO: use multiple of shiftwidth when indenting with '<' and '>'
    set linebreak    "Wrap lines at convenient points
    set formatoptions=qrn1 " TODO
    set textwidth=100
    set tabstop=4
    set shiftwidth=4
    set softtabstop=4
    set preserveindent " TODO
    set expandtab
    set smarttab " insert tabs on the start of a line according to shiftwidth, not tabstop
    set nopaste " when nopaste is set, it allows for abbreviations, cmaps, etc.

    " TODO: what do these do? they represent c formatting and indent options i.e., for non-indent sensitive languages (e.g., python)
    " set cinoptions=:s,ps,ts,cs
    " set cinwords=if,else,while,do
    " set cinwords+=for,switch,case

    " set nofoldenable "dont fold by default
    set foldenable "fold by default
    "set foldmethod=marker " detect triple-{ style fold markers
    set foldmethod=indent " perform code folding based on indentation levels
    set foldlevelstart=0 " 0 is start out with everything folded, -1 is no folding
    set foldcolumn=0 " don't have a fold column displayed beside line numbers
    set foldlevel=99 " nested levels above this number are auto-folded
    set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo " which commands trigger auto-unfold
    
    "let g:is_zsh = 1 " TODO what is this used for? stolen from tpope's .vimrc
    
    "set t_ce=^V^[[K	" (CTRL-V, <Esc>, [, K) to clear to end of line

    " help settings
    set helpheight=20 " default
    
    " Smart mappings on the command line
    " TODO: describe
    cno $h e ~/
    cno $d e ~/Downloads/
    cno $j e ./
    cno $c e <C-\>eCurrentFileDir("e")<cr>

    " $q is super useful when browsing on the command line
    cno $q <C-\>eDeleteTillSlash()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" FUNCTIONS {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "
    " source .vimrc
    "map <silent> <Leader>s :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo'vimrc reloaded'"<CR>
    noremap <silent> <Leader>s :source ~/.vimrc<CR>:filetype detect<CR>:exe "echo'vimrc reloaded'"<CR>
    
    " Edit vimrc \ev
    nnoremap <silent> <Leader>ev :tabedit ~/.vimrc<CR>
    "map <leader>e :e! ~/.vim_runtime/vimrc<cr>
    " Edit gvimrc \gv
    nnoremap <silent> <Leader>gv :tabnew<CR>:e ~/.gvimrc<CR>
    
    " When vimrc is edited, reload it
    "autocmd! bufwritepost vimrc source ~/.vimrc
    
    " Merge consecutive empty lines and clean up trailing whitespace
    map <Leader>fm :g/^\s*$/,/\S/-j<Bar>%s/\s\+$//<CR>

    func! s:MySys() " TODO
        return "mac"
    endfunc

    " TODO my function that remains unfinished
    " func! CreateGitStatusSplit()
    "   :vertical
    "   :Gstatus
    "   <C-w><C-w>
    "   :q
    "   <C-w>25<
    " endfunc
    
    "Delete trailing white space, useful for Python ;)
    func! DeleteTrailingWS()
        exe "normal mz"
        %s/\s\+$//ge
        exe "normal `z"
    endfunc
    autocmd BufWrite *.py :call DeleteTrailingWS()

    " build the file by running make/gcc
    " function! build()
    "    cd /home/arpan/ibm/scripts “go to the folder where Makefile is
    "    make CC=g++
    "    cd /home/sources “back to sources
    "    cl  “list the errors
    " endfunction 
    " map <F3> :call build()<CR>
    
    " For when you forget to sudo... Really Write the file.
    " https://github.com/bjeanes/dot-files/blob/master/vim/vimrc
    command! W call s:SudoWrite()
    function! s:SudoWrite()
        write !sudo tee % >/dev/null
        e!
    endfunction

    " Remove duplicates from a list
    " stolen from pathogen.vim by the one and only Tim Pope
    function! s:removeduplicates(list) abort
        let i = 0
        let seen = {}
        while i < len(a:list)
            if has_key(seen,a:list[i])
                call remove(a:list,i)
            else
                let seen[a:list[i]] = 1
                let i += 1
            endif
        endwhile
        return a:list
    endfunction

    " func! DeleteTillSlash()
    "   let g:cmd = getcmdline()
    "   if MySys() == "linux" || MySys() == "mac"
    "     let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
    "   else
    "     let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
    "   endif
    "   if g:cmd == g:cmd_edited
    "     if MySys() == "linux" || MySys() == "mac"
    "       let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
    "     else
    "       let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
    "     endif
    "   endif   
    "   return g:cmd_edited
    " endfunc

    func! CurrentFileDir(cmd)
        return a:cmd . " " . expand("%:p:h") . "/"
    endfunc

    command! Bclose call <SID>BufcloseCloseIt()
    function! <SID>BufcloseCloseIt()
       let l:currentBufNum = bufnr("%")
       let l:alternateBufNum = bufnr("#")

       if buflisted(l:alternateBufNum)
         buffer #
       else
         bnext
       endif

       if bufnr("%") == l:currentBufNum
         new
       endif

       if buflisted(l:currentBufNum)
         execute("bdelete! ".l:currentBufNum)
       endif
    endfunction

    " Specify the behavior when switching between buffers 
    try
        set switchbuf=usetab
        set stal=2
    catch
    endtry

    " Run firefox
    "cmap ff :!start "/Applications/BrowserApps/Nightly.app/Contents/MacOS/firefox" "%"<CR>

    "Automatically change current directory to that of the file in the buffer
    autocmd BufEnter * cd %:p:h
    
    " Source the vimrc right after saving it
    "if has("autocmd")
    " augroup myvimrchooks
    "  au!
    "  autocmd bufwritepost .vimrc source ~/.vimrc
    " augroup END
    "endif
    
    function! SurroundWith(char)
        return AppendLineOf(a:char) . "yykP"
    endf

    " Retab and Strip trailing whitespace 
    function! RetabAndStripTrailingWhitespace()
    	:retab!
    	:%s/\s\+$//e
    endfunction
    nnoremap <Leader>cu	:call RetabAndStripTrailingWhitespace()<CR>  

    " Open URL under cursor in browser (kidnapped from tpope's .vimrc)
    function! OpenURL(url)
        if has("win32")
            exe "!start cmd /cstart /b ".a:url.""
        elseif $DISPLAY !~ '^\w'
            exe "silent !sensible-browser \"".a:url."\""
        else
            exe "silent !sensible-browser -T \"".a:url."\""
        endif
        redraw!
    endfunction
    command! -nargs=1 OpenURL :call OpenURL(<q-args>)
    nnoremap gb :OpenURL <cfile><CR>
    nnoremap gA :OpenURL http://www.answers.com/<cword><CR>
    nnoremap gG :OpenURL https://www.duckduckgo.com/search?q=<cword><CR>
    nnoremap gW :OpenURL http://en.wikipedia.org/wiki/Special:Search?search=<cword><CR>
    " Standard 'go to manual' command
    nmap gm :exe OpenURL('http://google.com/search?q=' . expand("<cword>"))<cr>

    function! CurDir()
        let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
        return curdir
    endfunction

    function! HasPaste()
        if &paste
            return 'PASTE MODE  '
        else
            return ''
        endif
    endfunction

    " build ctags taglist for current working directory
    " commented out unmap since errors occured due to no map assignment
    " unmap <F8>
    map <F8> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

    " builds and then runs stage app
    function! BuildAndRunStage()
        " exe '!make && stage myTest.world'
        exe '!ls'
    endf
    " unmap <D-b>
    noremap <D-b> :call BuildAndRunStage()<CR>

    " custom vim folding
    " (cribbed from http://www.gregsexton.org/2011/03/improving-the-text-displayed-in-a-fold/)
    fu! CustomFoldText()
        "get first non-blank line
        let fs = v:foldstart
        while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
        endwhile
        if fs > v:foldend
            let line = getline(v:foldstart)
        else
            let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
        endif

        let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
        let foldSize = 1 + v:foldend - v:foldstart
        let foldSizeStr = " " . foldSize . " lines "
        let foldLevelStr = repeat("+--", v:foldlevel)
        let lineCount = line("$")
        let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
        let expansionString = repeat(".", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
        return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
    endf

    " fold a java/c block to include the function prototype
    " function FoldBrace()
    "   if getline(v:lnum+1)[0] == '{'
    "     return 1
    "   endif
    "   if getline(v:lnum) =~ '{'
    "     return 1
    "   endif
    "   if getline(v:lnum)[0] =~ '}'
    "     return '<1'
    "   endif
    "   return -1
    " endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" APPEARANCE {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " Set font according to system
    "if MySys() == "mac"
    "    set guifont=Inconsolata-dz:h13
    "    set shell=/usr/local/bin/zsh
    "elseif MySys() == "windows"
    "    set gfn=Bitstream\ Vera\ Sans\ Mono:h10
    "elseif MySys() == "linux"
    "    set gfn=Monospace\ 10
    "    set shell=/bin/bash
    "endif

    set bg=light
    set lazyredraw " do not redraw display while running macros
    set splitright " new buffers open to the right
    set nosplitbelow
    set cursorline
    set nocursorcolumn " turn off highlighting the column which the cursor is in
    " set ruler " show line and column of cursor position
    set laststatus=2 " 0 means never a statusline even in split-pane mode, 2 always displays one
    set cmdheight=1 " # of screen lines to use for display of cmd line
    set modeline
    set relativenumber

    " replace WinEnter/WinLeave autocmd's to add/remove line numbers in front of each line
    augroup BgHighlight
        " autocmd!
        " autocmd WinEnter * set relativenumber
        " autocmd WinLeave * set relativenumber
    augroup END

    " STAUTUSLINE settings & options
    " also see http://zfsu709.blogspot.com/2010/07/vim-statusline.html
    " %= right-aligns anything following it
    " %f     file path
    " %y     file type between braces (if defined)
    " %([%R%M]%)   read-only, modified and modifiable flags between braces
    " %{'!'[&ff=='default_file_format']}
    "        shows a '!' if the file format is not the platform default
    " %{'$'[!&list]}  shows a '*' if in list mode
    " %{'~'[&pm=='']} shows a '~' if in patchmode
    " (%{synIDattr(synID(line('.'),col('.'),0),'name')})
    "        only for debug : display the current syntax item name
    " %=     right-align following items
    " #%n    buffer number
    " %l/%L,%c%V   linenumber, total number of lines, and column number
    " %{} TODO
    " set statusline+=\ %{HasPaste()}%F%m%r%h\ %w\ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c\ 
    set statusline+=\ %{HasPaste()}%F%m%r%h\ %w\ \ \ %=%l/%L:%c\ \ %p%%

    if has("gui_running")
        colorscheme my-macvim
        " colorscheme github
        " colorscheme cleanroom
        set guifont=Droid\ Sans\ Mono:h13
        let s:terminal_italic=1
        " set font=Fanwood:h13
        " set guifont=Inconsolata-dz:h12
        set t_Co=256 " term has 256 colors
        set linespace=2
        set fuoptions=maxvert,maxhorz
        set fullscreen
        set numberwidth=5 " characters to use for the status line, folds and filler lines
    else
        colorscheme github
        set guifont=Inconsolata-dz:h12
        "if has("xterm-256colors")
            set t_Co=256 " term has 256 colors
        "else
            "set t_Co=16 " remote term has 16 colors for basic reasons
        set linespace=3
        set numberwidth=4
    endif
    
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" FILETYPES & LANGUAGES {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "

    " nginx {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        autocmd BufNewFile,BufRead */etc/nginx/* setlocal ft=nginx 
        
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}

    " Python {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        au FileType python runtime! autoload/pythoncomplete.vim
        au FileType python set omnifunc=pythoncomplete#Complete
        " au FileType python set guifont=Helvetica:h15:i
        au FileType python highlight Cursor guifg=#cfcfcf
        au FileType python setlocal foldmethod=indent foldlevel=99 foldenable
        au FileType python setlocal foldminlines=10 " TODO: foldminlines?
        au filetype python setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4 " TODO: expandtab?
        " au filetype python setlocal foldtext=substitute(getline(v:foldstart),'\\t','\ \ \ \ ','g')        
        au filetype python setlocal textwidth=100
        " display error message if we go beyond 100 chars wide
        au filetype python match ErrorMsg '\%>100v.\+'

        " Add the virtualenv's site-packages to vim path
        "py << EOF
        "import os.path
        "import sys
        "import vim
        "if 'VIRTUAL_ENV' in os.environ:
        "    project_base_dir = os.environ['VIRTUAL_ENV']
        "    sys.path.insert(0, project_base_dir)
        "    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
        "    execfile(activate_this, dict(__file__=activate_this))
        "EOF

        let python_highlight_all = 1
        au FileType python syn keyword pythonDecorator True None False self

        au BufNewFile,BufRead *.jinja set syntax=htmljinja
        au BufNewFile,BufRead *.mako set ft=mako

        "au FileType python inoremap <buffer> $r return 
        "au FileType python inoremap <buffer> $i import 
        "au FileType python inoremap <buffer> $p print 
        "au FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi
        "au FileType python map <buffer> <leader>1 /class 
        "au FileType python map <buffer> <leader>2 /def 
        "au FileType python map <buffer> <leader>C ?class 
        "au FileType python map <buffer> <leader>D ?def
        
        " Run a quick static syntax check every time we save a Python file
        "autocmd BufWritePost *.py call Flake8()
        
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}
    
    " Help File Settings {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        autocmd FileType help setlocal nonumber	" no line numbers when viewing help
        "autocmd FileType help highlight Cursor guibg=DarkGray " TODO
        
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}
    
    " Pentadactyl {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        au BufNewFile,BufRead *.pentadactylrc,pentadactylrc setfiletype vim
        au BufNewFile,BufRead *.pentadactylrc set ft=vim
        au BufNewFile,BufRead *.penta setfiletype vim
        au BufNewFile,BufRead *.penta set ft=vim
        au BufNewFile,BufRead *.pentadactylrc set foldmethod=marker
        au BufNewFile,BufRead *.pentadactylrc  set syntax=vim
        au FileType vim set foldmethod=marker
        
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}

    " Vim {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        au BufNewFile,BufRead *.vimrc,vimrc setfiletype vim
        au BufNewFile,BufRead *.vim setfiletype vim foldmethod=marker
        " au BufNewFile,BufRead *.vim setlocal foldmethod=marker
        au BufNewFile,BufRead *.vimrc setlocal foldmethod=marker
        " Strip whitespace on save
        autocmd BufWritePre *.vimrc :%s/\s\+$//e
        au FileType vim setlocal foldmethod=marker
        " au FileType vim set guifont=Helvetica:h15:i
        " au filetype vim match ErrorMsg '\%>100v.\+'
        
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}

    " RSS {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        autocmd BufNewFile,BufRead *.rss setfiletype xml " treat .rss files as XML
    
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}

    " Git {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        autocmd FileType git,gitcommit setlocal foldmethod=syntax foldlevel=1

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}

    " C {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        
        
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}
    
    " Objective-C {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        
        
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}
     
    " PBS {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        " qsub and pbs cluster scripts
        au BufNewFile,BufRead *.pbs setfiletype zsh
        
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}

    " Actionscript {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        " Treat .as files as Actionscript  
        autocmd BufNewFile,BufRead *.as setfiletype actionscript
        autocmd BufNewFile,BufRead *.as set filetype=actionscript
        
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}

    " Javascript {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        au FileType javascript call JavaScriptFold()
        au FileType javascript setl fen
        au FileType javascript setl nocindent

        au FileType javascript imap <c-t> AJS.log();<esc>hi
        au FileType javascript imap <c-a> alert();<esc>hi

        au FileType javascript inoremap <buffer> $r return 
        au FileType javascript inoremap <buffer> $f //--- PH ----------------------------------------------<esc>FP2xi

        function! JavaScriptFold() 
            setl foldmethod=syntax
            setl foldlevelstart=1
            syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

            function! FoldText()
            return substitute(getline(v:foldstart), '{.*', '{...}', '')
            endfunction
            setl foldtext=FoldText()
        endfunction
        
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}
    
    " Text {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        " autocmd BufRead,BufNewFile {*.txt,*.text} set wrap linebreak spell
        autocmd BufRead,BufNewFile {*.txt,*.text} set wrap linebreak 

        " identify txt files with no extensions
        autocmd BufRead README,INSTALL setlocal filetype=txt

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}

    " YAML {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        autocmd FileType yaml setlocal tabstop=4 shiftwidth=4 softtabstop=4

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}


    " Various other settings/configs {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        " Treat JSON files like JavaScript
        au BufNewFile,BufRead *.json set ft=javascript
         
        " Customisations based on house-style (arbitrary)
        "autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
        "autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
        "autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab

        " Show line number by default for followed filetype
        autocmd FileType html			setlocal number
        autocmd FileType xhtml			setlocal number
        autocmd FileType css,less		setlocal number
        autocmd filetype css,less       setlocal foldmethod=marker foldmarker={,}
        autocmd FileType javascript		setlocal number
        autocmd FileType php			setlocal number

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" PLUGINS SETUP {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "
    
    " Ack {{{
        nmap <leader>a <Esc>:Ack!
    " }}}
    
    " Clam {{{
        " nnoremap ! :Clam<space>
        " let g:clam_autoreturn = 1
    " }}}

    " Command-T {{{
        "let g:CommandTMaxHeight = 15
        "set wildignore+=*.o,*.obj,.git,*.pyc,*.hg,*.svn,*.swp,*.bak,*.class
        "noremap <leader>j :CommandT<cr>
        "noremap <leader>y :CommandTFlush<cr>
        "let g:CommandTMaxFiles=20000

        "if has("gui_macvim")
        "   macmenu &File.New\ Tab key=<nop>
        "   map <D-t> :CommandT<CR>
        "endif
    " }}}

    " Commentary {{{
        "nmap <leader>c <Plug>CommentaryLine
        "xmap <leader>c <Plug>Commentary
        "au FileType htmldjango setlocal commentstring={#\ %s\ #}
    " }}}

    " Fugitive {{{
        set statusline+=\ 
        set statusline+=%#GitStatusLine#
        set statusline+=%{fugitive#statusline()}
        set statusline+=%*

        " ,g for Ggrep
        nmap <leader>g :Ggrep
    " }}}
    
    " Gist {{{
        " Send visual selection to gist.github.com as a private, filetyped Gist
        " Requires the gist command line too (brew install gist)
        " vnoremap <leader>G :w !gist -p -t %:e \| pbcopy<cr>
    " }}}

    " MinibufExplorer {{{
        "let g:miniBufExplModSelTarget = 1
        "let g:miniBufExplorerMoreThanOne = 0
        "let g:miniBufExplModSelTarget = 0
        "let g:miniBufExplUseSingleClick = 1
        "let g:miniBufExplMapWindowNavVim = 1
        "let g:miniBufExplVSplit = 25
        "let g:miniBufExplSplitBelow=1

        "map <c-w><c-t> :WMToggle<cr>
    " }}}
    
    " NERDTree settings {{{
        " Put focus to the NERD Tree with F3 (tricked by quickly closing it and immediately showing it again, since there is no :NERDTreeFocus command)
        nmap <leader>n :NERDTreeClose<CR>:NERDTreeToggle<CR>
        nmap <leader>m :NERDTreeClose<CR>:NERDTreeFind<CR>
        nmap <leader>N :NERDTreeClose<CR>
        map <leader>n :execute 'NERDTreeToggle ' . getcwd()<CR>
        nmap <leader>nt :NERDTreeToggle <CR>
        nmap <C-u> :NERDTreeToggle<CR>
        
        " Store the bookmarks file
        let NERDTreeBookmarksFile=expand("~/.dotfiles/vim/NERDTreeBookmarks")
        
        " Show the bookmarks table on startup
        let NERDTreeShowBookmarks=1
        " Show hidden files, too
        let NERDTreeShowFiles=1
        let NERDTreeShowHidden=1
        " Don't display these kinds of files
        let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$']

        " open a NERDTree automatically when vim starts even if no files were specified at launch
        autocmd vimenter * if !argc() | NERDTree | endif
        " close vim if nerdtree is last window open
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
        
        " Quit on opening files from the tree
        "let NERDTreeQuitOnOpen=1
        
        " Highlight the selected entry in the tree
        let NERDTreeHighlightCursorline=1
        " Use a single click to fold/unfold directories and a double click to open files
        let NERDTreeMouseMode=2
        
        " Focus cursor in new document
        autocmd VimEnter * wincmd p

        " let g:NERDTreeCaseSensitiveSort = 1
        " let g:NERDTreeDirArrows = 1
        " let g:NERDTreeMinimalUI = 1
        " let g:NERDTreeQuitOnOpen = 1
        " let g:NERDTreeShowBookmarks = 1
        " let g:NERDTreeWinPos = 'right'
        " let g:NERDTreeWinSize = 50
    " }}}
    
    " NERDtree-Tabs-Toggle {{{
        map <Leader>n <plug>NERDTreeTabsToggle<CR>
    " }}}

    " Peepopen {{{
        " Quit peepopen when vim exits
        "let p:peepopen_quit = 1
    " }}}
    
    " NerdCommenter {{{
        " TODO: see T-comment if this is a duplicate
        "nmap <leader>c<space>:NERDComToggleComment " TODO this already built-in i believe
        nmap <leader>/ :call NERDComment(0, "invert")<cr>
        vmap <leader>/ :call NERDComment(0, "invert")<cr>
    " }}}
    
    " OrgMode {{{
        "let g:org_plugins = ['ShowHide', '|', 'Navigator', 'EditStructure', '|', 'Todo', 'Date', 'Misc']
        "let g:org_todo_keywords = ['TODO', '|', 'DONE']
        "let g:org_debug = 1
    " }}}
    
    " Powerline {{{
        let g:Powerline_symbols = 'fancy'
        let g:Powerline_cache_enabled = 1
        let g:Powerline_theme = 'default'
        let g:Powerline_colorscheme = 'default'
        let g:Powerline_dividers_override = ['>>', '>', '<<', '<'] " TODO: not working?
        let g:Powerline_stl_path_style = 'relative'
    " }}}
    
    " Python-mode {{{
        " let g:pymode_run = 0
        " let g:pymode_lint = 0
        " let g:pymode_breakpoint = 0
        " let g:pymode_utils = 0
        " let g:pymode_utils_whitespaces = 0
        " let g:pymode_syntax = 0
        " let g:pymode_options_indent = 0
        " let g:pymode_options_fold = 0
        " let g:pymode_options_other = 0
    " }}}

    " SuperTab {{{
        let g:SuperTabContextDefaultCompletionType = '<c-n>'
        let g:SuperTabLongestEnhanced = 1
        au FileType python set omnifunc=pythoncomplete#Complete
        let g:SuperTabDefaultCompletionType = "context"
        set completeopt=menuone,longest,preview
    " }}}
    
    " DO NOT USE: replaced Ropevim with python-mode
    " Ropevim {{{
        "map <leader>j :RopeGotoDefinition<CR>
        "map <leader>r :RopeRename<CR>
    " }}}
    
    " Slime {{{
        "let g:slime_target = "tmux" "use tmux instead of screen
    " }}}

    " Snipmate {{{
        "source ~/.dotfiles/vim/snipmate-snippets/support_functions.vim
        "autocmd vimenter * call s:SetupSnippets()
        "function! s:SetupSnippets()
        "    "if we're in a rails env then read in the rails snippets
        "    if filereadable("./config/environment.rb")
        "        call ExtractSnips("~/.vim/snippets/ruby-rails", "ruby")
        "        call ExtractSnips("~/.vim/snippets/eruby-rails", "eruby")
        "    endif
        "
        "    call ExtractSnips("~/.vim/snippets/html", "eruby")
        "    call ExtractSnips("~/.vim/snippets/html", "xhtml")
        "    call ExtractSnips("~/.vim/snippets/html", "php")
        "endfunction
    " }}}
    
    " Surround {{{
        "let g:surround_{char2nr('-')} = "<% \r %>"
        "let g:surround_{char2nr('=')} = "<%= \r %>"
        "let g:surround_{char2nr('8')} = "/* \r */"
        "let g:surround_{char2nr('s')} = " \r"
        "let g:surround_{char2nr('^')} = "/^\r$/"
        "let g:surround_indent = 1
    " }}}
    
    " Syntastic {{{
        " TODO: i don't think there's any config for this plugin   
    " }}}
    
    " Taglist (Ctags) {{{
        "map <F4> :TlistToggle<cr>
        "set tags+=$HOME/.vim/tags/python.ctags
        let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
        let Tlist_WinWidth = 50
        " show TagList window on the right
        let Tlist_Use_Right_Window=1
        let Tlist_Exit_OnlyWindow=1         " quit when TagList is the last open window
        let Tlist_GainFocus_On_ToggleOpen=1 " put focus on the TagList window when it opens
        "let Tlist_Process_File_Always=1     " process files in the background, even when the TagList window isn't open
        "let Tlist_Show_One_File=1           " only show tags from the current buffer, not all open buffers
        " let Tlist_Inc_Winwidth=1            " increase window by 1 when growing
        " TagList Plugin Configuration
        "let Tlist_Close_On_Select = 1
        "let Tlist_File_Fold_Auto_Close = 1
        nmap <leader>t :TlistToggle<CR>
    " }}}
    
    " Tagbar {{{
        nmap <F7> :TagbarToggle<CR>
    " }}}
    
    " Tasklist {{{
        " organizes todos, etc.
        "map <leader>td <Plug>TaskList
    " }}}

    " Tcomment {{{
        " TODO: i don't think there's any config for this plugin   
        " toggles comments on/off
        " 'gcc' toggles comments for the current line 
        " 'gC{motion}' comments a visually selected region (choose region first)
        " 'gCc' comment the current line even if it has a comment
        " nunmap gcc
        " nmap gc :TCommentMaybeInline<CR>
    " }}}

    " tslime {{{
        let g:tslime_ensure_trailing_newlines = 1
        let g:tslime_normal_mapping = '<localleader>t'
        let g:tslime_visual_mapping = '<localleader>t'
        let g:tslime_vars_mapping = '<localleader>T'
    " }}}

    " YankRing {{{
        "let g:yankring_history_dir = '~/.dotfiles/vim/tmp'
        "nmap <leader>r :YRShow<CR>
    " }}}
    
    " Unimpaired plugin {{{ TODO
        " Bubble single lines
        nmap <C-Up> [e
        nmap <C-Down> ]e
        " Bubble multiple lines
        vmap <C-Up> [egv
        vmap <C-Down> ]egv"
    " }}}
    
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" OTHER ASSORTEDS {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "

    " iPad {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        " used for iPad's iSSH app. iOS doesn't allow use of esc key, so makes using vim difficult
        " see http://gilesbowkett.blogspot.com/2011/03/how-to-set-up-vim-to-work-well-via-issh.html
        "if &term == "xterm-ipad"
        "    nnoremap <Tab> <Esc>
        "    vnoremap <Tab> <Esc>gV
        "    onoremap <Tab> <Esc>
        "    inoremap <Tab> <Esc>`^
        "    inoremap <Leader><Tab> <Tab>
        "endif
    " }}}
    
    
    " Macvim {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
         " Create a menu item with title "Newest Window" under the "File" menu, with key equivalent Cmd-k, which opens a new window when selected 
         ":an 10.290 File.Newest\ Window <Nop>
         ":macm File.Newest\ Window action=newWindow: key=<D-k>

    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" TEXT EXPANSIONS & ABBREVIATIONS{{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "
    iabbrev ggmail firstname.lastname@gmail.com
    iabbrev xdate <C-R>=strftime("%d/%m/%Y %H:%M:%S")<CR>
    iabbrev TDO " TODO
    
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}


" added by oh-my-vim
" let g:ohmyvim="/Library/Frameworks/Python.framework/Versions/2.6/bin/oh-my-vim"
" Use :OhMyVim profiles to list all available profiles
" let profiles = ['defaults']
" load oh-my-vim
" source /Users/mt/.vim/ohmyvim/ohmyvim.vim



" vim: set ft=vim:foldmethod=marker:
