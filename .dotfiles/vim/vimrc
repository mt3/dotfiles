" TODO {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " when 'source .vimrc' make the highlights clear ':nohl'
    " always open macvim with split pane with the vim help file or whatever info pane (2/3 file, 1/3 help)
    " a line with a todo should have darkened background for the rest of the line after the todo
    " have vim's help page open in a horizontal split pane (on right), not vertical 'splitright' instead of 'splitbelow'?
    " get rid of string highlights in vim files while in the body of a comment such as "this" (check ':set comments?' for what this ftype is using)
    " change code-folding message so that '32 lines' is a lighter color than the line number
    " .pentadactylrc and .penta files need to be syntax-highlighted using vim (i have an attempt below, but doesn't work)
    " use <M-/> for toggling comments on/off a la textmate
    " document what many of the non-obvious options do
    " always open new panes to the right horizontally
    " get rid of the .swp file after ':q' is used to close the pane
    " change color of matching brackets in showmatch option
    " nmap / :h<space>
    " turn off spaces at end of lines when it's just a bunch of tabs
    " make comments a different font (helvetica? italicized?)
    " after i do a 'save', automatically change to visual mode
    " with autoindent, when <CR> is typed to get new indented line, <Esc> somehow removes the indent
    " stop infinite scroll at bottom of buffer, go 10 max
    " in split panes, unfocused buffers should be dimmed
    " list all keybindings
    " delete LOAD PLUGINS once i get pathogen back up and running
    " fugitive isn't updating statusline
    " have code pasted into vim automatically be indented and formatted properly as per context
    " 
    " 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" MAIN STARTUP & LOADING {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    set nocompatible " Necesary for fun
    
    " setup vim plugins using pathogen
    filetype off " need to turn off filetype for pathogen
    " To disable a plugin, add it's bundle name to the following list
    let g:pathogen_disabled = []
    call add(g:pathogen_disabled, 'vimpy')
    call add(g:pathogen_disabled, 'simplenote')
    call add(g:pathogen_disabled, 'tasklist')
    call add(g:pathogen_disabled, 'minibufexplorer')
    call add(g:pathogen_disabled, 'vim-django')
    
    "source ~/.dotfiles/vim/bundle/vim-pathogen/autoload/pathogen.vim
    "set runtimepath=~/.dotfiles/vim,$VIMRUNTIME
    
    ""call pathogen#runtime_append_all_bundles() "TODO not used anymore? use infect()?
    "call pathogen#infect('~/.dotfiles/vim/bundle')
    "call pathogen#helptags()
    syntax on
    filetype on
    filetype plugin indent on
    
    version 7.3
    if &cp | set nocp | endif
    let s:cpo_save=&cpo " 's:' means variable 'cpo_save' has scope defined locally only within this script
    set cpo&vim
    
    set runtimepath=~/.dotfiles/vim,$VIMRUNTIME

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



"TODO: delete this section after pathogen has been fixed
" LOAD PLUGINS {{{ 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    source ~/.dotfiles/vim/bundle/ack.vim/plugin/ack.vim
    helptags ~/.dotfiles/vim/bundle/ack.vim/doc
    set rtp+=~/.dotfiles/vim/bundle/ack.vim
    
    source ~/.dotfiles/vim/bundle/vim-fugitive/plugin/fugitive.vim
    helptags ~/.dotfiles/vim/bundle/vim-fugitive/doc
    set rtp+=~/.dotfiles/vim/bundle/vim-fugitive
    
    "source ~/.dotfiles/vim/bundle/
    "helptags ~/.dotfiles/vim/bundle/
    "set rtp+=~/.dotfiles/vim/bundle/
    
    "source ~/.dotfiles/vim/bundle/
    "helptags ~/.dotfiles/vim/bundle/
    "set rtp+=~/.dotfiles/vim/bundle/
    
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" MAPPINGS {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    "remap left/right arrow keys for tab next/previous
    map <Left> gT
    map <Right> gt
    imap <D-BS> 
    imap <M-BS> 
    imap <M-Down> }
    inoremap <D-Down> <C-End>
    imap <M-Up> {
    inoremap <D-Up> <C-Home>
    noremap! <M-Right> <C-Right>
    noremap! <D-Right> <End>
    noremap! <M-Left> <C-Left>
    noremap! <D-Left> <Home>
    map! <D-v> *
    "nmap gx <Plug>NetrwBrowseX
    map <M-Down> }
    noremap <D-Down> <C-End>
    map <M-Up> {
    noremap <D-Up> <C-Home>
    noremap <M-Right> <C-Right>
    noremap <D-Right> <End>
    noremap <M-Left> <C-Left>
    noremap <D-Left> <Home>
    "nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
    vmap <BS> "-d
    vmap <D-x> "*d
    vmap <D-c> "*y
    vmap <D-v> "-d"*P
    nmap <D-v> "*P
    nnoremap Y  y$

    let &cpo=s:cpo_save
    unlet s:cpo_save
    
    " Tab or Shift-Tab indents/unidents selected line(s)
    vnoremap <S-Tab> <gv
    vnoremap <Tab>	 >gv
    nnoremap <S-Tab> <<
    nnoremap <Tab>	 >>

    " TODO save file, then goto visual mode
    map <M-s> <esc>:w<CR>

    " map Enter key to add a new line below and return to visual mode
    nmap <CR> o<esc>
    
    " Move cursor together with the screen
    noremap <c-j> j<c-e>
    noremap <c-k> k<c-y>
    
    " Bubble single lines
    nmap <C-Up> ddkP
    nmap <C-Down> ddp
    
    " Better Marks
    nnoremap ' `
    
    " Swap ; and :  Convenient. as. fukc.
    nnoremap ; :
    nnoremap : ;
    " Saves time
    nmap <Space> ;
    
    " make e go to end of line and get ready to type in insert mode if shift is selected
    nmap e $
    nmap E $a<SPACE>
    
    "TODO trying for indentation shortcut
    "vnoremap <M-<> <gV
    "vnoremap <M->> >gV
    
    " Bash like keys for the command line
    "cnoremap <C-A>      <Home>
    "cnoremap <C-E>      <End>
    "cnoremap <C-K>      <C-U>
    
    " Quick alignment of text
    nmap <leader>al :left<CR>
    nmap <leader>ar :right<CR>
    nmap <leader>ac :center<CR>
    
    " show yankring
    "map <leader>yr :YRShow<cr> 
    
    " quickly get rid of highlights
    "nnoremap <S-F3> :set hlsearch!<CR>
    "map <leader>h :noh<CR> 
    map <leader>h :set hlsearch!<CR>
    
    " toggle invisibles (whitespace, etc.)
    map <leader>li :set list!<CR> 
    
    " hitting jj or kk will jump out of insert mode
    imap jj <esc>
    imap kk <esc>
    
    " Map function keys
    "
    " toggle/untoggle folds TODO zR is open all folds and zM is close all folds (combine in one keystroke)
    map <f1> zR<esc>
    map <f2> zM<esc>
    map <f3> :exe ":echo 'yesy'"<CR>
    "map <f >
    " build ctags taglist for current working directory
    map <F8> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" OPTIONS, CONFIGURATION, AND SETTINGS {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    set noerrorbells
    set visualbell
    set guicursor+=a:blinkon0 "turn off goddamned blinking
    set t_vb=
    set autoread " watch for file changes
    set backspace=indent,eol,start
    set fileencodings=ucs-bom,utf-8,default,latin1
    set guioptions=egmT
    set guitablabel=%M%t
    set helplang=en
    set langmenu=none
    set mouse=a " enable mouse in all modes
    set printexpr=system('open\ -a\ Preview\ '.v:fname_in)\ +\ v:shell_error
    set termencoding=utf-8
    set scrolloff=3 " keep at least 3 lines above/below
    set sidescrolloff=3 " keep at least 3 lines left/right
    set autoindent
    set cpoptions+=I " TODO maintain indent on a new line after <Esc> is pressed or 'save' file
    set showmode
    set showcmd " <leader> key appears in right hand corner of vim (to the left of the cursor location) and it disappears when the timeout happens
    set hidden
    set report=0 " Always report changes
    set wildmenu
    set wildmode=list:longest
    set history=200
    
    set cursorline
    set nocursorcolumn " turn off highlighting the column which the cursor is in
    set ruler " show line and column of cursor position
    set fullscreen
    set laststatus=0 " never a statusline even in split-pane mode
    set cmdheight=2 " # of screen lines to use for display of cmd line
    set modeline
    set relativenumber
    set undofile " keep a permanent undo file
    set undodir=~/.dotfiles/vim/undo,~/tmp,/tmp
    set undoreload=1000
    set undolevels=1000
    set complete=.,w,b,u,U,t,i,d  " do lots of scanning on tab completion

    " Turn backup off since futurefolks use hg/git/etc.
    set nobackup
    set nowb
    " set backup
    "set backupdir=~/.dotfiles/vim/tmp/vim-backup-files
    " puts swap files in this temp directory rather than all over the fukcing place
    "set directory=~/.dotfiles/vim/tmp/vim-swp-files
    
    set ttyfast " we have a fast car
    set ttimeoutlen=50 " make Esc work faster
    set timeoutlen=1000 " time to press next key after <Leader> has been pressed before it clears
    set shell=/usr/local/bin/zsh

    " TODO describe
    "if v:version >= 700
    "    set viminfo=!,'20,<50,s10,h
    "endif
    
    let mapleader = ","
    
    set ignorecase
    set smartcase " Case insensitive searches become sensitive with capitals
    set gdefault
    set incsearch
    set showmatch " show matching bracket
    set hlsearch
    
    filetype on
    filetype indent on
    filetype plugin on
    filetype detect
    syntax enable
    
    set wrap
    "set formatoptions=qrn1 " TODO
    
    set tabstop=4
    set shiftwidth=4
    set softtabstop=4
    set expandtab
    "set nofoldenable "dont fold by default
    "set foldmethod=marker " detect triple-{ style fold markers
    set foldmethod=indent " perform code folding based on indentation levels
    set foldlevelstart=0 " start out with everything folded
    set foldcolumn=0 " don't have a fold column displayed beside line numbers
    "set foldlevel=99 "TODO what does this do?
    
    autocmd FileType python runtime! autoload/pythoncomplete.vim
    autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2
    autocmd BufNewFile,BufRead */etc/nginx/* setlocal ft=nginx
    au BufNewFile,BufRead *.pentadactylrc set ft=vim
    au BufNewFile,BufRead *.penta set ft=vim

    "let g:is_zsh = 1 " TODO what is this used for? stolen from tpope's .vimrc
    
    "set t_ce=^V^[[K	" (CTRL-V, <Esc>, [, K) to clear to end of line

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" FUNCTIONS {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " source .vimrc
    "map <silent> <Leader>s :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo'vimrc reloaded'"<CR>
    map <silent> <leader>s :source ~/.vimrc<CR>
    
    " Edit vimrc \ev
    nnoremap <silent> <Leader>ev :tabedit ~/.vimrc<CR>
    "map <leader>e :e! ~/.vim_runtime/vimrc<cr>
    " Edit gvimrc \gv
    nnoremap <silent> <Leader>gv :tabnew<CR>:e ~/.gvimrc<CR>
    
    " When vimrc is edited, reload it
    "autocmd! bufwritepost vimrc source ~/.vim_runtime/vimrc
    
    " Create Blank Newlines and stay in Normal mode
    nnoremap <silent> zj o<Esc>
    nnoremap <silent> zk O<Esc>
    
    " Merge consecutive empty lines and clean up trailing whitespace
    map <Leader>fm :g/^\s*$/,/\S/-j<Bar>%s/\s\+$//<CR>
    
    " Standard 'go to manual' command
    nmap gm :exe OpenURL('http://google.com/search?q=' . expand("<cword>"))<cr>

    " https://github.com/bjeanes/dot-files/blob/master/vim/vimrc
    " For when you forget to sudo.. Really Write the file.
    "command! W call s:SudoWrite()
    "function! s:SudoWrite()
    "  write !sudo tee % >/dev/null
    "  e!
    "endfunction

    " Run firefox
    cmap ff :!start "/Applications/BrowerApps/Nightly" "%"<CR>

    "Automatically change current directory to that of the file in the buffer
    autocmd BufEnter * cd %:p:h
    
    " Source the vimrc right after saving it
    "if has("autocmd")
    " augroup myvimrchooks
    "  au!
    "  autocmd bufwritepost .vimrc source ~/.vimrc
    " augroup END
    "endif
    
    function! SurroundWith(char)
        return AppendLineOf(a:char) . "yykP"
    endf

    " Retab and Strip trailing whitespace 
    function! RetabAndStripTrailingWhitespace()
    	:retab!
    	:%s/\s\+$//e
    endfunction
    nnoremap <Leader>cu	:call RetabAndStripTrailingWhitespace()<CR>  

    "Opens a vertical split and switches over
    nnoremap <leader>v <C-w>v<C-w>l

    " Open URL under cursor in browser (kidnapped from tpope's .vimrc)
    function! OpenURL(url)
        if has("win32")
            exe "!start cmd /cstart /b ".a:url.""
        elseif $DISPLAY !~ '^\w'
            exe "silent !sensible-browser \"".a:url."\""
        else
            exe "silent !sensible-browser -T \"".a:url."\""
        endif
        redraw!
    endfunction
    command! -nargs=1 OpenURL :call OpenURL(<q-args>)
    nnoremap gb :OpenURL <cfile><CR>
    nnoremap gA :OpenURL http://www.answers.com/<cword><CR>
    nnoremap gG :OpenURL https://www.duckduckgo.com/search?q=<cword><CR>
    nnoremap gW :OpenURL http://en.wikipedia.org/wiki/Special:Search?search=<cword><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" APPEARANCE {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    colorscheme my-macvim
    set bg=light
    set guifont=Inconsolata:h14
    set t_Co=256 " term has 256 colors
    set lazyredraw " do not redraw while running macros
    set linespace=3
    set nosplitbelow
    set splitright " new buffers open to the right
    set fuoptions=maxvert,maxhorz
    set fullscreen

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" LANGUAGES {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    " Python Settings {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    au FileType python set omnifunc=pythoncomplete#Complete
    
    " Add the virtualenv's site-packages to vim path
    "py << EOF
    "import os.path
    "import sys
    "import vim
    "if 'VIRTUAL_ENV' in os.environ:
    "    project_base_dir = os.environ['VIRTUAL_ENV']
    "    sys.path.insert(0, project_base_dir)
    "    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    "    execfile(activate_this, dict(__file__=activate_this))
    "EOF
    
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}


    " C Settings {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}
    
    
    " Objective-C Settings {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" PLUGINS SETUP {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " Snipmate {{{
        "source ~/.dotfiles/vim/snipmate-snippets/support_functions.vim
        "autocmd vimenter * call s:SetupSnippets()
        "function! s:SetupSnippets()
        "    "if we're in a rails env then read in the rails snippets
        "    if filereadable("./config/environment.rb")
        "        call ExtractSnips("~/.vim/snippets/ruby-rails", "ruby")
        "        call ExtractSnips("~/.vim/snippets/eruby-rails", "eruby")
        "    endif
        "
        "    call ExtractSnips("~/.vim/snippets/html", "eruby")
        "    call ExtractSnips("~/.vim/snippets/html", "xhtml")
        "    call ExtractSnips("~/.vim/snippets/html", "php")
        "endfunction
    " }}}
    
    " Command-T {{{
        "let g:CommandTMaxHeight = 15
        "set wildignore+=*.o,*.obj,.git,*.pyc,*.hg,*.svn,*.swp,*.bak,*.class
        "noremap <leader>j :CommandT<cr>
        "noremap <leader>y :CommandTFlush<cr>
        "let g:CommandTMaxFiles=20000

        "if has("gui_macvim")
        "   macmenu &File.New\ Tab key=<nop>
        "   map <D-t> :CommandT<CR>
        "endif
    " }}}
    
    " NERDTree settings {{{
        " Put focus to the NERD Tree with F3 (tricked by quickly closing it and immediately showing it again, since there is no :NERDTreeFocus command)
        "nmap <leader>n :NERDTreeClose<CR>:NERDTreeToggle<CR>
        "nmap <leader>m :NERDTreeClose<CR>:NERDTreeFind<CR>
        "nmap <leader>N :NERDTreeClose<CR>
        "map <leader>n :execute 'NERDTreeToggle ' . getcwd()<CR>
        
        " Store the bookmarks file
        "let NERDTreeBookmarksFile=expand("~/.dotfiles/vim/NERDTreeBookmarks")
        
        " Show the bookmarks table on startup
        "let NERDTreeShowBookmarks=1
        
        " Show hidden files, too
        "let NERDTreeShowFiles=1
        "let NERDTreeShowHidden=1
        
        " Quit on opening files from the tree
        "let NERDTreeQuitOnOpen=1
        
        " Highlight the selected entry in the tree
        "let NERDTreeHighlightCursorline=1
        
        " Use a single click to fold/unfold directories and a double click to open files
        "let NERDTreeMouseMode=2
        
        " Don't display these kinds of files
        "let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$']
        
        "nmap <leader>nt :NERDTreeToggle <CR>
        "
        ""Show hidden files in NerdTree
        "let NERDTreeShowHidden=1
        "
        ""autopen NERDTree and focus cursor in new document
        "autocmd VimEnter * NERDTree
        "autocmd VimEnter * wincmd p
    " }}}
    
    " Peepopen {{{
        " Quit peepopen when vim exits
        "let p:peepopen_quit = 1
    " }}}
    
    " NerdCommenter {{{
        "nmap <leader>c<space>:NERDComToggleComment " TODO this already built-in i believe
    " }}}
    
    " OrgMode {{{
        "let g:org_plugins = ['ShowHide', '|', 'Navigator', 'EditStructure', '|', 'Todo', 'Date', 'Misc']
        "let g:org_todo_keywords = ['TODO', '|', 'DONE']
        "let g:org_debug = 1
    " }}}
    
    " Commentary {{{
        "nmap <leader>c <Plug>CommentaryLine
        "xmap <leader>c <Plug>Commentary
        "au FileType htmldjango setlocal commentstring={#\ %s\ #}
    " }}}
    
    " SuperTab {{{
        "let g:SuperTabDefaultCompletionType = "context"
        "set completeopt=menuone,longest,preview
    " }}}
    
    " Fugitive {{{
        set statusline+=\ 
        set statusline+=%#GitStatusLine#
        set statusline+=%{fugitive#statusline()}
        set statusline+=%*
    " }}}
    
    " Ack {{{
        nmap <leader>a <Esc>:Ack!
    " }}}
    
    " DO NOT USE: replaced with python-mode
    " Ropevim {{{
        "map <leader>j :RopeGotoDefinition<CR>
        "map <leader>r :RopeRename<CR>
    " }}}
    
    " Slime {{{
        "let g:slime_target = "tmux" "use tmux instead of screen
    " }}}
    
    " Surround {{{
        "let g:surround_{char2nr('-')} = "<% \r %>"
        "let g:surround_{char2nr('=')} = "<%= \r %>"
        "let g:surround_{char2nr('8')} = "/* \r */"
        "let g:surround_{char2nr('s')} = " \r"
        "let g:surround_{char2nr('^')} = "/^\r$/"
        "let g:surround_indent = 1
    " }}}
    
    " Taglist (Ctags) {{{
        "let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
        "let Tlist_WinWidth = 50
        "map <F4> :TlistToggle<cr>
        "set tags+=$HOME/.vim/tags/python.ctags
    " }}}
    
    " Tagba {{{r
        "nmap <F7> :TagbarToggle<CR>
    " }}}
    
    " Tasklist {{{
        " organizes todos, etc.
        "map <leader>td <Plug>TaskList
    " }}}

    " YankRing stuff {{{
        "let g:yankring_history_dir = '~/.dotfiles/vim/tmp'
        "nmap <leader>r :YRShow<CR>
    " }}}
    
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" OTHER STUFF {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " iPad {{{
    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
        " used for iPad's iSSH app. iOS doesn't allow use of esc key, so makes using vim difficult
        " see http://gilesbowkett.blogspot.com/2011/03/how-to-set-up-vim-to-work-well-via-issh.html
        "if &term == "xterm-ipad"
        "    nnoremap <Tab> <Esc>
        "    vnoremap <Tab> <Esc>gV
        "    onoremap <Tab> <Esc>
        "    inoremap <Tab> <Esc>`^
        "    inoremap <Leader><Tab> <Tab>
        "endif
    " }}}
    
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}



" vim: set ft=vim :


